---
title: "Class 2 code"
author: "G.Carteny"
date: '2025.04.14'
format: pptx
toc: true
---

```{r admin, echo = FALSE, warning = FALSE, error = FALSE}


# Admin 

admin <- T
if(admin) {
  want = c("dplyr", "magrittr", "rio",  "ggplot2",
           "here", "haven", "labelled", "nnet",
           "ggridges", "ggthemes", "stargazer")
  have = want %in% rownames(installed.packages())
  if ( any(!have) ) { install.packages( want[!have] ) }
  # load packages
  junk <- lapply(want, library, character.only = TRUE)
  rm(have, want, junk)
  options(scipen = 99)
  rm(list = ls())
}

# Foo # ------------------------------------------------------------------------

# Wrapper as.numeric 
asn <- function(x) {as.numeric(x)}


# Load wrangled data # ---------------------------------------------------------

ess <- read_dta(here('data', 'ess', 'ESS 2013.dta'))


# Prepare the poltrst vrbl from ESS (KIS example) # ----------------------------


# Yes, but better (dplyr)
ess %<>%
  mutate(
    # Flip the scales
    trst_prty = max(trstprt,na.rm=T) + min(trstprt,na.rm=T) - trstprt,
    trst_parl = max(trstprl,na.rm=T) + min(trstprl,na.rm=T) - trstprl,
    # Create aggregate measur
    poltrst = trst_prty + trst_parl
  )


# Prepare the cdx rad vrbl from ESS # ------------------------------------------

ess %<>%
  mutate(
    cdx_rad = case_when(
      prtvtbit %in% c(9, 10, 13) ~ 2,         
      prtvtbit %in% 1:6 ~ 0,                  
      prtvtbit %in% 8  ~ 1,                 
      prtvtbit == 12 ~ 0,                   
      prtvtbit == 14 ~ NA_real_,             
      TRUE ~ as.numeric(prtvtbit)
    )
  )

# wrangle and select ess data for reg  # ------------------------------------------------

ess_reg <-
  ess %>%
  mutate(year = 2013) %>%
  dplyr::select(
    year,
    age,
    sex,
    edu,
    job,
    polint,
    lr4,
    geo,
    prt_close,
    religion,
    immi,
    immi_z,
    immi_2z,
    trst_prty,
    trst_parl,
    poltrst,
    cdx,
    cdx_rad
  ) %>%
  mutate(cdx_rad_past = NA)


```

# R Numeric types

```{r num_1, echo=TRUE, eval = FALSE}
# Real numbers ("double")
x <- 9
z <- 13.2

# Integers
y <- 4L

# Characters
start <- "R is so much"
end <- "fun!"
sentence <- paste(start, end, sep = " ")

# Logicals & Boolean operators
2 + 5 == 6              # Does 2 + 5 equal 6?
isFALSE(3 + 4 != 2 + 5) # Is it false that 3 + 4 is not equal to 2 + 5?
3 | 4 >= 2 + 1          # Is 3 OR 4 greater than/equal to 2 + 1?
3 & 7 %in% c(1:5)       # Are 3 AND 7 included in an integer sequence from 1 to 5?
```

# Arithmetic operators and transformations

```{r ari, eval=FALSE, echo=TRUE}
x + y     # addition
x - y     # subtraction
x * y     # multiplication
x / y     # division
x ^ y     # exponentiation
log(x)    # natural logarithm
exp(x)    # exponential
sqrt(x)   # square root
a %*% b   # vector/matrix multiplication
t(a)      # vector/matrix transposition
solve(A)  # matrix inversion
```

# Object type: Vector

A vector is a serial listing of data elements of the same type (e.g. `integer`, `double`, `logical`, or `character`).

```{r vec1_1, echo = TRUE}
item <- c("flour", "sugar", "potatoes", "tomatoes", "bananas")
price <- c(.99, 1.49, 1.99, 2.79, 1.89)
pricey <- price > 1.5
```

# Object type:  Matrices

A matrix is a rectangular arrangement of data elements of the same type.

```{r mat1_1, echo = TRUE}
mat1 <- matrix(seq(-.35, .35, .1), nrow = 2, ncol = 4)
mat1
```

# Object type: Arrays

An array is a multidimensional arrangement of data elements of the same type.

You may think of an array as a generalization of a matrix to any number of dimensions:

* all elements are of the same type
* fixed dimensional structure
* any vector or matrix can be stored as an array using `as.array()`

# Object type: Lists

Lists allow you to store objects of various classes, various storage types, and various sizes.
This can be very useful, e.g., for returning various outputs from a function.

```{r list1_1 , echo = TRUE}
my_list <- list()
my_list$char_mat <- matrix(LETTERS, nrow = 2, ncol = 13)
my_list$vectors <- list()
my_list$vectors$num_vec1 <- c(1:2)
my_list$vectors$num_vec2 <- runif(10, min = 0, max = 1)
```

# Object type: Data Frames

Data frames are lists of variables of equal length, producing a
rectangular structure. Unlike matrix columns, data frame columns can be of
different storage types and classes.  

```{r df, echo = TRUE}
groceries <- data.frame(
  item = c("flour", "sugar", "potatoes", "tomatoes", "bananas"),
  price = c(.99, 1.49, 1.99, 2.79, 1.89)
)

groceries
```

# Mean 1

```{r mean_1, echo = TRUE}

ess_reg %>% 
  ggplot(aes(x=immi)) +
  geom_density(fill='orange2') +
  theme_classic()


```

# Mean 2

```{r mean_2, echo = TRUE}

ess_reg %>% 
  mutate(
    immi_mean = mean(immi, na.rm=T)
  ) %>% 
  ggplot(aes(x=immi)) +
  geom_density(fill='orange2', alpha=.6) +
  geom_vline(aes(xintercept = immi_mean), linetype = 'dashed', colour = 'dodgerblue3', linewidth = 2) +
  theme_classic()


```


# Median 1

```{r median1, echo = TRUE}

ess_reg %>% 
  mutate(
    immi_mean = mean(immi, na.rm=T),
    immi_med = median(immi, na.rm=T)
  ) %>% 
  ggplot(aes(x=immi)) +
  geom_density(fill='orange2', alpha=.6) +
  geom_vline(aes(xintercept = immi_mean), linetype = 'dashed', colour = 'dodgerblue3', linewidth = 1) +
  geom_vline(aes(xintercept = immi_med), linetype = 'dashed', colour = 'green4', linewidth = 1) +
  theme_classic()


```

# Median 2

```{r median2, echo = TRUE}
set.seed(1234)
ess_reg %>% 
  dplyr::select(immi) %>% 
  rbind(.,data.frame(immi = rnorm(1000, mean=20, sd=1))) %>% 
  mutate(
    immi_mean = mean(immi, na.rm=T),
    immi_med = median(immi, na.rm=T)
  ) %>% 
  ggplot(aes(x=immi)) +
  geom_density(fill='orange2', alpha=.6) +
  geom_vline(aes(xintercept = immi_mean), linetype = 'dashed', colour = 'dodgerblue3', linewidth = 1) +
  geom_vline(aes(xintercept = immi_med), linetype = 'dashed', colour = 'green4', linewidth = 1) +
  theme_classic()


```

# Standard deviation/Variance

```{r, echo = T}

ess_reg %>% 
  mutate(
    immi_mean = mean(immi, na.rm = TRUE),
    immi_sd = sd(immi, na.rm = TRUE)
  ) %>% 
  ggplot(aes(x = immi)) +
  geom_density(fill = 'orange2', alpha = 0.6) +
  geom_vline(aes(xintercept = immi_mean), 
             linetype = 'dashed', colour = 'dodgerblue3', linewidth = 1) +
  geom_vline(aes(xintercept = immi_mean + immi_sd), 
             linetype = 'dashed', colour = 'red', linewidth = 1) +
  geom_vline(aes(xintercept = immi_mean - immi_sd), 
             linetype = 'dashed', colour = 'red', linewidth = 1) +
  theme_classic()


```

```{r, echo = T}

ess_reg %>% 
  mutate(
    immi_mean = mean(immi, na.rm = TRUE),
    immi_se = sd(immi, na.rm = TRUE) / sqrt(sum(!is.na(immi)))
  ) %>% 
  ggplot(aes(x = immi)) +
  geom_density(fill = 'orange2', alpha = 0.6) +
  geom_vline(aes(xintercept = immi_mean), 
             linetype = 'dashed', colour = 'dodgerblue3', linewidth = 1) +
  geom_vline(aes(xintercept = immi_mean + immi_se), 
             linetype = 'dashed', colour = 'purple', linewidth = 1) +
  geom_vline(aes(xintercept = immi_mean - immi_se), 
             linetype = 'dashed', colour = 'purple', linewidth = 1) +
  theme_classic()


```

# Standard error 


# Central limit theorem

```{r echo = T}

library(ggplot2)
library(dplyr)

set.seed(1234)

# 1. Create population
population <- rnorm(10000, mean = 50, sd = 10)

# 2. Take one sample from the population
sample_data <- sample(population, size = 100, replace = TRUE)

# 3. Simulate sampling distribution of the sample mean
sample_means <- replicate(1000, mean(sample(population, size = 100, replace = TRUE)))

# 4. Create data frames for plotting
df_sample <- as.data.frame(table(round(sample_data)))
colnames(df_sample) <- c("value", "frequency")

df_sampling_dist <- as.data.frame(table(round(sample_means, 1)))
colnames(df_sampling_dist) <- c("sample_mean", "frequency")

# 5. Plot: Sample distribution
p1 <- ggplot(df_sample, aes(x = as.numeric(value), y = frequency)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(title = "Sample Distribution", x = "Value", y = "Frequency") +
  theme_minimal()

# 6. Plot: Sampling distribution of the sample mean
p2 <- ggplot(df_sampling_dist, aes(x = as.numeric(sample_mean), y = frequency)) +
  geom_bar(stat = "identity", fill = "darkorange") +
  labs(title = "Sampling Distribution of the Sample Mean", x = "Sample Mean", y = "Frequency") +
  theme_minimal()

# 7. Show both plots side by side
library(gridExtra)
grid.arrange(p1, p2, nrow = 1)

```

# The Mean (Arithmetic Average)

- Calculated by summing all values and dividing by the number of observations  
- Formula:  
  $$ \text{Mean} = \frac{\sum x_i}{n} $$
- Sensitive to **every value** in the dataset  
- Affected by **extreme values** (outliers)  
- Appropriate for **symmetric** distributions

---

## Properties of the Mean

- **Uses all data points** â€” efficient and mathematically tractable  
- **Minimises squared deviations**  
- **Not robust** to outliers  
- Sample mean is an unbiased estimator of the **population mean**

---

## The Median

- The **middle value** when data are ordered  
- If even number of observations: average of the two middle values  
- Not influenced by **extreme values** or **skewed distributions**  
- Best used when the data are **ordinal** or **skewed**
